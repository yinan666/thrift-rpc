/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wangyn.framework.thrift.data;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 响应数据类型
 * success 调用是否成功
 * serviceName  调用的服务名称
 * resultCode  响应码，如200表示成功，400表示
 * resultMsg   响应提示信息
 * resultData  响应结果数据，是json串,或者就是一个普通字符串，需调用方和提供方约定具体参数
 * callId  标识调用过程的唯一id，该id由调用者传过来，可使用uuid等唯一标识的数据
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-24")
public class ResponseData implements org.apache.thrift.TBase<ResponseData, ResponseData._Fields>, java.io.Serializable, Cloneable, Comparable<ResponseData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResponseData");

  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("resultMsg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RESULT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("resultData", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("callId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseDataTupleSchemeFactory());
  }

  public String serviceName; // required
  /**
   * 
   * @see ResultCodeEnum
   */
  public ResultCodeEnum resultCode; // required
  public String resultMsg; // required
  public String resultData; // required
  public String callId; // required
  public boolean success; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVICE_NAME((short)1, "serviceName"),
    /**
     * 
     * @see ResultCodeEnum
     */
    RESULT_CODE((short)2, "resultCode"),
    RESULT_MSG((short)3, "resultMsg"),
    RESULT_DATA((short)4, "resultData"),
    CALL_ID((short)5, "callId"),
    SUCCESS((short)6, "success");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_NAME
          return SERVICE_NAME;
        case 2: // RESULT_CODE
          return RESULT_CODE;
        case 3: // RESULT_MSG
          return RESULT_MSG;
        case 4: // RESULT_DATA
          return RESULT_DATA;
        case 5: // CALL_ID
          return CALL_ID;
        case 6: // SUCCESS
          return SUCCESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUCCESS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_CODE, new org.apache.thrift.meta_data.FieldMetaData("resultCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ResultCodeEnum.class)));
    tmpMap.put(_Fields.RESULT_MSG, new org.apache.thrift.meta_data.FieldMetaData("resultMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_DATA, new org.apache.thrift.meta_data.FieldMetaData("resultData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALL_ID, new org.apache.thrift.meta_data.FieldMetaData("callId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResponseData.class, metaDataMap);
  }

  public ResponseData() {
  }

  public ResponseData(
    String serviceName,
    ResultCodeEnum resultCode,
    String resultMsg,
    String resultData,
    String callId,
    boolean success)
  {
    this();
    this.serviceName = serviceName;
    this.resultCode = resultCode;
    this.resultMsg = resultMsg;
    this.resultData = resultData;
    this.callId = callId;
    this.success = success;
    setSuccessIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResponseData(ResponseData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
    if (other.isSetResultCode()) {
      this.resultCode = other.resultCode;
    }
    if (other.isSetResultMsg()) {
      this.resultMsg = other.resultMsg;
    }
    if (other.isSetResultData()) {
      this.resultData = other.resultData;
    }
    if (other.isSetCallId()) {
      this.callId = other.callId;
    }
    this.success = other.success;
  }

  public ResponseData deepCopy() {
    return new ResponseData(this);
  }

  @Override
  public void clear() {
    this.serviceName = null;
    this.resultCode = null;
    this.resultMsg = null;
    this.resultData = null;
    this.callId = null;
    setSuccessIsSet(false);
    this.success = false;
  }

  public String getServiceName() {
    return this.serviceName;
  }

  public ResponseData setServiceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  /**
   * 
   * @see ResultCodeEnum
   */
  public ResultCodeEnum getResultCode() {
    return this.resultCode;
  }

  /**
   * 
   * @see ResultCodeEnum
   */
  public ResponseData setResultCode(ResultCodeEnum resultCode) {
    this.resultCode = resultCode;
    return this;
  }

  public void unsetResultCode() {
    this.resultCode = null;
  }

  /** Returns true if field resultCode is set (has been assigned a value) and false otherwise */
  public boolean isSetResultCode() {
    return this.resultCode != null;
  }

  public void setResultCodeIsSet(boolean value) {
    if (!value) {
      this.resultCode = null;
    }
  }

  public String getResultMsg() {
    return this.resultMsg;
  }

  public ResponseData setResultMsg(String resultMsg) {
    this.resultMsg = resultMsg;
    return this;
  }

  public void unsetResultMsg() {
    this.resultMsg = null;
  }

  /** Returns true if field resultMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetResultMsg() {
    return this.resultMsg != null;
  }

  public void setResultMsgIsSet(boolean value) {
    if (!value) {
      this.resultMsg = null;
    }
  }

  public String getResultData() {
    return this.resultData;
  }

  public ResponseData setResultData(String resultData) {
    this.resultData = resultData;
    return this;
  }

  public void unsetResultData() {
    this.resultData = null;
  }

  /** Returns true if field resultData is set (has been assigned a value) and false otherwise */
  public boolean isSetResultData() {
    return this.resultData != null;
  }

  public void setResultDataIsSet(boolean value) {
    if (!value) {
      this.resultData = null;
    }
  }

  public String getCallId() {
    return this.callId;
  }

  public ResponseData setCallId(String callId) {
    this.callId = callId;
    return this;
  }

  public void unsetCallId() {
    this.callId = null;
  }

  /** Returns true if field callId is set (has been assigned a value) and false otherwise */
  public boolean isSetCallId() {
    return this.callId != null;
  }

  public void setCallIdIsSet(boolean value) {
    if (!value) {
      this.callId = null;
    }
  }

  public boolean isSuccess() {
    return this.success;
  }

  public ResponseData setSuccess(boolean success) {
    this.success = success;
    setSuccessIsSet(true);
    return this;
  }

  public void unsetSuccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  /** Returns true if field success is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  public void setSuccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    case RESULT_CODE:
      if (value == null) {
        unsetResultCode();
      } else {
        setResultCode((ResultCodeEnum)value);
      }
      break;

    case RESULT_MSG:
      if (value == null) {
        unsetResultMsg();
      } else {
        setResultMsg((String)value);
      }
      break;

    case RESULT_DATA:
      if (value == null) {
        unsetResultData();
      } else {
        setResultData((String)value);
      }
      break;

    case CALL_ID:
      if (value == null) {
        unsetCallId();
      } else {
        setCallId((String)value);
      }
      break;

    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_NAME:
      return getServiceName();

    case RESULT_CODE:
      return getResultCode();

    case RESULT_MSG:
      return getResultMsg();

    case RESULT_DATA:
      return getResultData();

    case CALL_ID:
      return getCallId();

    case SUCCESS:
      return isSuccess();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_NAME:
      return isSetServiceName();
    case RESULT_CODE:
      return isSetResultCode();
    case RESULT_MSG:
      return isSetResultMsg();
    case RESULT_DATA:
      return isSetResultData();
    case CALL_ID:
      return isSetCallId();
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResponseData)
      return this.equals((ResponseData)that);
    return false;
  }

  public boolean equals(ResponseData that) {
    if (that == null)
      return false;

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    boolean this_present_resultCode = true && this.isSetResultCode();
    boolean that_present_resultCode = true && that.isSetResultCode();
    if (this_present_resultCode || that_present_resultCode) {
      if (!(this_present_resultCode && that_present_resultCode))
        return false;
      if (!this.resultCode.equals(that.resultCode))
        return false;
    }

    boolean this_present_resultMsg = true && this.isSetResultMsg();
    boolean that_present_resultMsg = true && that.isSetResultMsg();
    if (this_present_resultMsg || that_present_resultMsg) {
      if (!(this_present_resultMsg && that_present_resultMsg))
        return false;
      if (!this.resultMsg.equals(that.resultMsg))
        return false;
    }

    boolean this_present_resultData = true && this.isSetResultData();
    boolean that_present_resultData = true && that.isSetResultData();
    if (this_present_resultData || that_present_resultData) {
      if (!(this_present_resultData && that_present_resultData))
        return false;
      if (!this.resultData.equals(that.resultData))
        return false;
    }

    boolean this_present_callId = true && this.isSetCallId();
    boolean that_present_callId = true && that.isSetCallId();
    if (this_present_callId || that_present_callId) {
      if (!(this_present_callId && that_present_callId))
        return false;
      if (!this.callId.equals(that.callId))
        return false;
    }

    boolean this_present_success = true;
    boolean that_present_success = true;
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (this.success != that.success)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_serviceName = true && (isSetServiceName());
    list.add(present_serviceName);
    if (present_serviceName)
      list.add(serviceName);

    boolean present_resultCode = true && (isSetResultCode());
    list.add(present_resultCode);
    if (present_resultCode)
      list.add(resultCode.getValue());

    boolean present_resultMsg = true && (isSetResultMsg());
    list.add(present_resultMsg);
    if (present_resultMsg)
      list.add(resultMsg);

    boolean present_resultData = true && (isSetResultData());
    list.add(present_resultData);
    if (present_resultData)
      list.add(resultData);

    boolean present_callId = true && (isSetCallId());
    list.add(present_callId);
    if (present_callId)
      list.add(callId);

    boolean present_success = true;
    list.add(present_success);
    if (present_success)
      list.add(success);

    return list.hashCode();
  }

  @Override
  public int compareTo(ResponseData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, other.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultCode()).compareTo(other.isSetResultCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultCode, other.resultCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultMsg()).compareTo(other.isSetResultMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultMsg, other.resultMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultData()).compareTo(other.isSetResultData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultData, other.resultData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallId()).compareTo(other.isSetCallId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callId, other.callId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResponseData(");
    boolean first = true;

    sb.append("serviceName:");
    if (this.serviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultCode:");
    if (this.resultCode == null) {
      sb.append("null");
    } else {
      sb.append(this.resultCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultMsg:");
    if (this.resultMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.resultMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultData:");
    if (this.resultData == null) {
      sb.append("null");
    } else {
      sb.append(this.resultData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("callId:");
    if (this.callId == null) {
      sb.append("null");
    } else {
      sb.append(this.callId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("success:");
    sb.append(this.success);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseDataStandardSchemeFactory implements SchemeFactory {
    public ResponseDataStandardScheme getScheme() {
      return new ResponseDataStandardScheme();
    }
  }

  private static class ResponseDataStandardScheme extends StandardScheme<ResponseData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResponseData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resultCode = ResultCodeEnum.findByValue(iprot.readI32());
              struct.setResultCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultMsg = iprot.readString();
              struct.setResultMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESULT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultData = iprot.readString();
              struct.setResultDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.callId = iprot.readString();
              struct.setCallIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.success = iprot.readBool();
              struct.setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResponseData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serviceName != null) {
        oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.serviceName);
        oprot.writeFieldEnd();
      }
      if (struct.resultCode != null) {
        oprot.writeFieldBegin(RESULT_CODE_FIELD_DESC);
        oprot.writeI32(struct.resultCode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.resultMsg != null) {
        oprot.writeFieldBegin(RESULT_MSG_FIELD_DESC);
        oprot.writeString(struct.resultMsg);
        oprot.writeFieldEnd();
      }
      if (struct.resultData != null) {
        oprot.writeFieldBegin(RESULT_DATA_FIELD_DESC);
        oprot.writeString(struct.resultData);
        oprot.writeFieldEnd();
      }
      if (struct.callId != null) {
        oprot.writeFieldBegin(CALL_ID_FIELD_DESC);
        oprot.writeString(struct.callId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      oprot.writeBool(struct.success);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseDataTupleSchemeFactory implements SchemeFactory {
    public ResponseDataTupleScheme getScheme() {
      return new ResponseDataTupleScheme();
    }
  }

  private static class ResponseDataTupleScheme extends TupleScheme<ResponseData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResponseData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetServiceName()) {
        optionals.set(0);
      }
      if (struct.isSetResultCode()) {
        optionals.set(1);
      }
      if (struct.isSetResultMsg()) {
        optionals.set(2);
      }
      if (struct.isSetResultData()) {
        optionals.set(3);
      }
      if (struct.isSetCallId()) {
        optionals.set(4);
      }
      if (struct.isSetSuccess()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetServiceName()) {
        oprot.writeString(struct.serviceName);
      }
      if (struct.isSetResultCode()) {
        oprot.writeI32(struct.resultCode.getValue());
      }
      if (struct.isSetResultMsg()) {
        oprot.writeString(struct.resultMsg);
      }
      if (struct.isSetResultData()) {
        oprot.writeString(struct.resultData);
      }
      if (struct.isSetCallId()) {
        oprot.writeString(struct.callId);
      }
      if (struct.isSetSuccess()) {
        oprot.writeBool(struct.success);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResponseData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.serviceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resultCode = ResultCodeEnum.findByValue(iprot.readI32());
        struct.setResultCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resultMsg = iprot.readString();
        struct.setResultMsgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.resultData = iprot.readString();
        struct.setResultDataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.callId = iprot.readString();
        struct.setCallIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.success = iprot.readBool();
        struct.setSuccessIsSet(true);
      }
    }
  }

}

